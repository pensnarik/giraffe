#!/usr/bin/env python3

import sys
import yaml
import time
import argparse
import datetime as dt

import psycopg2
import psycopg2.extras
import requests

class App():

    clusters = {}
    receivers = {}
    metric_ids = {}

    def __init__(self):
        arg_parser = argparse.ArgumentParser(description='Giraffe watchdog')
        arg_parser.add_argument('--cluster', type=str, help='Cluster to monitor')
        arg_parser.add_argument('--receiver', type=str, help='Giraffe REST API URL')
        self.args = arg_parser.parse_args()

        if self.args.cluster is not None and self.args.receiver is not None:
            self.clusters['from_args'] = {'dsn': self.args.cluster}
            self.receivers['from_args'] = self.args.receiver
        else:
            self.read_config_from_file()

        self.read_metrics_from_file()

    def connect(self):
        for (cluster_name, cluster) in self.clusters.items():
            self.clusters[cluster_name] = psycopg2.connect(cluster['dsn'])

    def read_config_from_file(self):
        config = yaml.load(open('giraffe.yml', 'rt'))
        self.clusters = config['clusters']
        self.receivers = config['receivers']

    def read_metrics_from_file(self):
        self.config = yaml.load(open('/usr/local/etc/giraffe.d/basic.yml', 'rt'))

    def get_query_by_name(self, name):
        return self.config['queries'][name[1:]]['query']

    def get_metrics(self, cluster):
        print(self.config['metrics'])
        for (metric_name, metric) in self.config['metrics'].items():
            if metric['query'].startswith('$'):
                query = self.get_query_by_name(metric['query'])
            else:
                query = metric['query']

            cursor = self.clusters[cluster].cursor(cursor_factory=psycopg2.extras.RealDictCursor)
            cursor.execute(query)

            for row in cursor.fetchall():
                if row['db'] not in ['template0', 'template1', 'postgres']:
                    yield {'cluster': cluster, 'metric': metric_name,
                           'db': row['db'], 'value': row[metric_name],
                           'id': self.metric_ids[metric_name],
                           'timestamp': dt.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

            cursor.close()

    def send_packet(self, packet):
        for (receiver_name, receiver) in self.receivers.items():
            result = requests.post('%s/receive' % receiver, json=packet)

    def propose(self):
        for (receiver_name, receiver) in self.receivers.items():
            response = requests.post('%s/propose' % receiver, json=self.config['metrics'])

            if response.status_code != 200 or response.json()['result'] != 'ok':
                raise Exception("Cannot propose metrics to the database")

            self.metric_ids = response.json()['metrics']

    def run(self):
        self.connect()
        self.propose()

        while True:
            packet = {}

            for cluster in self.clusters:
                metrics = []

                # TODO: Query metrics in parallel when it's possible
                for metric in self.get_metrics(cluster):
                    metrics.append(metric)

                packet[cluster] = metrics

            # TODO: Send async
            self.send_packet(packet)

            time.sleep(5)

if __name__ == '__main__':
    app = App()
    sys.exit(app.run())
